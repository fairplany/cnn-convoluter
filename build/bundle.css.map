{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../Chip.svelte",
    "../../Header.svelte",
    "../../Icon.svelte",
    "../../NavigationDrawer.svelte",
    "../../ProgressCircular.svelte",
    "../../ProgressLinear.svelte",
    "../../Ripple.svelte",
    "../../Snackbar.svelte",
    "../../Label.svelte",
    "../../Underline.svelte",
    "../../Tooltip.svelte",
    "../../Waypoint.svelte",
    "../../App.svelte",
    "../../Header.svelte",
    "../../Kernel.svelte",
    "../../Settings.svelte",
    "../../Box3d.svelte",
    "../../MatrixDrawer2d.svelte",
    "../../MatrixDrawer3d.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { createEventDispatcher } from \"svelte\";\n  import { scale } from \"svelte/transition\";\n  import createRipple from \"../Ripple/ripple.js\";\n  import utils, { ClassBuilder, filterProps } from \"../../utils/classes.js\";\n\n  import Icon from \"../Icon\";\n\n\n\n  export let removable = false;\n  export let icon = \"\";\n  export let outlined = false;\n  export let selected = false;\n  export let selectable = true;\n  export let color = \"primary\";\n  export let remove = \"\";\n  export let add = \"\";\n  export let replace = {};\n\n  $: ripple = createRipple(color);\n\n  let value = true;\n\n  const dispatch = createEventDispatcher();\n\n  function close() {\n    dispatch(\"close\");\n    value = false;\n  }\n\n  function select() {\n    if (!selectable) return;\n\n    selected = true;\n  }\n\n  const { bg, txt, border } = utils(color);\n\n  const cb = new ClassBuilder();\n\n  $: classes = cb\n    .flush()\n    .add('relative overflow-hidden flex items-center rounded-full px-2 py-1')\n    .add('bg-transparent border', outlined)\n    .add('border-gray-400 border-solid hover:bg-gray-50 dark-hover:bg-dark-400 bg-gray-300 dark:bg-dark-600', !selected)\n    .add(`${border()} dark:${border('800')} ${txt()} ${bg(100)} hover:${bg(50)}`, selected)\n    .remove(remove)\n    .replace(replace)\n    .add(add)\n    .get();\n\n  const props = filterProps([\n    'removable',\n    'icon',\n    'outlined',\n    'selected',\n    'selectable',\n    'color',\n  ], $$props);\n\n  $: iconClass = selected ? `hover:${bg(300)} ${bg(400)}` : \"hover:bg-gray-400 bg-gray-500 dark:bg-gray-800\";\n\n   $: c = cb\n      .flush()\n      .add($$props.class)\n      .get();\n</script>\n\n<style>\n  .p-1\\/2 {\n    padding: 0.125rem;\n  }\n</style>\n\n{#if value}\n  <span class=\"{c} mx-1 inline-block\" out:scale={{ duration: 100 }}>\n    <button\n      class={classes}\n      on:click\n      use:ripple\n      {...props}\n      on:click={select}>\n      {#if icon}\n        <Icon small class={selected ? txt(400) : 'text-gray-600'}>\n          {icon}\n        </Icon>\n      {/if}\n      <span class=\"px-2 text-sm\">\n        <slot />\n      </span>\n      {#if removable}\n        <span\n          class=\"rounded-full p-1/2 inline-flex items-center cursor-pointer {iconClass}\"\n          on:click|stopPropagation={close}>\n          <Icon class=\"text-white dark:text-white\" xs>clear</Icon>\n        </span>\n      {/if}\n    </button>\n  </span>\n{/if}\n",
    "<script>\n  import { ClassBuilder } from \"../../utils/classes.js\";\n  import { createEventDispatcher } from \"svelte\";\n  import Icon from \"../Icon\";\n\n  const classesDefault = \"capitalize duration-100 text-gray-600 text-xs hover:text-black dark-hover:text-white p-3 font-normal text-right\";\n\n\n  export let classes = classesDefault;\n\n\n  export let column = {};\n  export let asc = false;\n  export let sortBy = false;\n  export let sortable = true;\n  export let editing = false;\n\n  const dispatch = createEventDispatcher();\n\n  const cb = new ClassBuilder(classes, classesDefault);\n  $: c = cb\n    .flush()\n    .add(classes, true, classesDefault)\n    .add($$props.class)\n    .get();\n\n  function headerColumnClass(column) {\n    const cb = new ClassBuilder('sort-wrapper flex items-center justify-end');\n    if (column.headerReplace) {\n      cb.replace(column.headerReplace)\n    }\n    if (column.headerAdd) {\n      cb.add(column.headerAdd);\n    }\n    if (column.headerRemove) {\n      cb.remove(column.headerRemove);\n    }\n    return cb.get();\n  }\n</script>\n\n<style>\n  th .asc {\n    transform: rotate(180deg);\n  }\n</style>\n\n<th\n  class={c}\n  class:cursor-pointer={sortable || column.sortable}\n  on:click={() => {\n    if (column.sortable === false || !sortable) return;\n    dispatch(\"sort\", column);\n\n    editing = false;\n    asc = sortBy === column ? !asc : false;\n    sortBy = column;\n  }}\n>\n  <div class={headerColumnClass(column)}>\n    {#if sortable && column.sortable !== false && !column.iconAfter}\n      <span class=\"sort\" class:asc={!asc && sortBy === column}>\n        <Icon small color=\"text-gray-400 dark:text-gray-100\">arrow_downward</Icon>\n      </span>\n    {/if}\n    <span>{column.label || column.field}</span>\n    {#if sortable && column.sortable !== false && !!column.iconAfter}\n      <span class=\"sort\" class:asc={!asc && sortBy === column}>\n        <Icon small color=\"text-gray-400 dark:text-gray-100\">arrow_downward</Icon>\n      </span>\n    {/if}\n  </div>\n</th>\n",
    "<script>\n\n\n  export let small = false;\n  export let xs = false;\n  export let reverse = false;\n  export let tip = false;\n  export let color = \"default\";\n</script>\n\n<style>\n  .reverse {\n    transform: rotate(180deg);\n  }\n\n  .tip {\n    transform: rotate(90deg);\n  }\n</style>\n\n<i\n  aria-hidden=\"true\"\n  class=\"material-icons icon text-xl {$$props.class} duration-200 ease-in\"\n  class:reverse\n  class:tip\n  on:click\n  class:text-base={small}\n  class:text-xs={xs}\n  style={color ? `color: ${color}` : ''}>\n  <slot />\n</i>\n",
    "<script>\n  import { fly } from \"svelte/transition\";\n  import { quadIn } from \"svelte/easing\";\n  import { Scrim } from \"../Util\";\n  import breakpoints from \"../../breakpoints\";\n  import { ClassBuilder } from \"../../utils/classes.js\";\n\n  const bp = breakpoints();\n\n  const classesDefault = \"fixed top-0 md:mt-16 w-auto drawer overflow-hidden h-full\";\n  const navClassesDefault = `h-full w-full bg-white dark:bg-gray-900 dark:text-gray-200 absolute flex w-auto z-20 drawer\n    pointer-events-auto overflow-y-auto`;\n\n  export let right = false;\n  export let persistent = false;\n  export let elevation = true;\n  export let show = true;\n  export let classes = classesDefault;\n  export let navClasses = navClassesDefault;\n  export let borderClasses = `border-gray-600 ${right ? \"border-l\" : \"border-r\"}`;\n\n\n\n\n  export let transitionProps = {\n    duration: 200,\n    x: -300,\n    easing: quadIn,\n    opacity: 1,\n  };\n\n  $: transitionProps.x = right ? 300 : -300;\n  $: persistent = show = $bp !== \"sm\";\n\n  const cb = new ClassBuilder(classes, classesDefault);\n\n  if ($bp === 'sm') show = false;\n\n  $: c = cb\n    .flush()\n    .add(classes, true, classesDefault)\n    .add(borderClasses, !elevation && persistent)\n    .add($$props.class)\n    .add(\"right-0\", right)\n    .add(\"left-0\", !right)\n    .add(\"pointer-events-none\", persistent)\n    .add(\"z-50\", !persistent)\n    .add(\"elevation-4\", elevation)\n    .add(\"z-20\", persistent)\n    .get();\n\n  const ncb = new ClassBuilder(navClasses, navClassesDefault);\n\n  $: n = ncb\n    .flush()\n    .get();\n\n</script>\n\n<style>\n  .drawer {\n    min-width: 250px;\n  }\n\n  aside {\n    height: 100vh;\n  }\n</style>\n\n{#if show}\n  <aside\n    class={c}\n    transition:fly={transitionProps}\n  >\n    {#if !persistent}\n      <Scrim on:click={() => show = false} />\n    {/if}\n    <nav\n      role=\"navigation\"\n      class={n}\n    >\n      <div class=\"w-full\">\n        <slot />\n      </div>\n    </nav>\n  </aside>\n{/if}\n",
    "<script>\n  export let progress = null;\n  export let color = \"primary\";\n  export let width = 3;\n  export let size = 70;\n\n  $: style = progress > 0 ? `\n      animation: none;\n      stroke-dasharray: ${150000 - progress * 1000};\n      stroke-dashoffset: -${124 - (progress * 124) / 100};\n    ` : \"\";\n</script>\n\n<style>\n  .circular {\n    animation: rotate 2s linear infinite;\n    position: relative;\n  }\n\n  .path {\n    stroke-dasharray: 1, 200;\n    stroke-dashoffset: 0;\n    stroke-linecap: round;\n    animation: dash 1.5s ease-in-out infinite;\n  }\n\n  @keyframes rotate {\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n\n  @keyframes dash {\n    0% {\n      stroke-dasharray: 1, 200;\n      stroke-dashoffset: 0;\n    }\n    50% {\n      stroke-dasharray: 89, 200;\n      stroke-dashoffset: -35;\n    }\n    100% {\n      stroke-dasharray: 89, 200;\n      stroke-dashoffset: -124;\n    }\n  }\n</style>\n\n<svg class=\"circular\" style=\"width: {size}px; height: {size}px;\">\n  <circle\n    class=\"path stroke-{color}\"\n    cx={size / 2}\n    cy={size / 2}\n    fill=\"none\"\n    r={(size / 2) - (size / 5)}\n    stroke-width={width}\n    stroke-miterlimit=\"10\"\n    {style} />\n</svg>\n",
    "<script>\n  import { onMount } from \"svelte\";\n  import { slide } from \"svelte/transition\";\n\n  export let app = false;\n  export let progress = 0;\n  export let color = \"primary\";\n\n  let initialized = false;\n\n  onMount(() => {\n    if (!app) return;\n\n    setTimeout(() => {\n      initialized = true;\n    }, 200);\n  });\n</script>\n\n<style>\n  /* kudos https://codepen.io/shalimano/pen/wBmNGJ */\n  .inc {\n    animation: increase 2s ease-in-out infinite;\n  }\n  .dec {\n    animation: decrease 2s 0.9s ease-in-out infinite;\n  }\n\n  @keyframes increase {\n    from {\n      left: -5%;\n      width: 5%;\n    }\n    to {\n      left: 130%;\n      width: 150%;\n    }\n  }\n  @keyframes decrease {\n    from {\n      left: -90%;\n      width: 90%;\n    }\n    to {\n      left: 110%;\n      width: 10%;\n    }\n  }\n</style>\n\n<div\n  class:fixed={app}\n  class:z-50={app}\n  class=\"top-0 left-0 w-full h-1 bg-{color}-100 overflow-hidden relative\"\n  class:hidden={app && !initialized}\n  transition:slide={{ duration: 300 }}>\n  <div\n    class=\"bg-{color}-500 h-1 absolute\"\n    class:inc={!progress}\n    class:transition={progress}\n    style={progress ? `width: ${progress}%` : \"\"} />\n  <div class=\"bg-{color}-500 h-1 absolute dec\" class:hidden={progress} />\n</div>\n",
    "<script>\n  export let color = \"primary\";\n  export let noHover = false;\n  import createRipple from \"../Ripple/ripple.js\";\n\n  $: ripple = createRipple(color, true);\n  $: hoverClass = `hover:bg-${color}-transLight`;\n</script>\n\n<style>\n  .ripple {\n    position: absolute !important;\n  }\n</style>\n\n<span\n  use:ripple\n  class=\"z-40 {$$props.class} p-2 rounded-full flex items-center justify-center top-0 left-0 {noHover ? \"\" : hoverClass}\">\n  <slot />\n</span>\n",
    "<script context=\"module\">\n  import { writable } from \"svelte/store\";\n\n  const queue = writable([]);\n  let running = false;\n</script>\n\n<script>\n  import { fade, scale } from \"svelte/transition\";\n  import { createEventDispatcher } from \"svelte\";\n\n  import { quadOut, quadIn } from \"svelte/easing\";\n  import Button from \"../Button\";\n  import { Spacer } from \"../Util\";\n  import utils, { ClassBuilder } from \"../../utils/classes.js\";\n\n  export let value = false;\n  export let timeout = 2000;\n  export let inProps = { duration: 100, easing: quadIn };\n  export let outProps = { duration: 100, easing: quadOut, delay: 150 };\n  export let color = \"gray\";\n  export let text = \"white\";\n  export let top = false;\n  export let bottom = true;\n  export let right = false;\n  export let left = false;\n  export let noAction = true;\n  export let hash = false;\n\n  const dispatch = createEventDispatcher();\n\n  const classesDefault = `pointer-events-auto flex absolute py-2 px-4 z-30 mb-4 content-between mx-auto\n      rounded items-center elevation-2 h-12`;\n  const wrapperDefault = \"fixed w-full h-full flex items-center justify-center pointer-events-none\";\n\n  export let classes = wrapperDefault;\n\n  const cb = new ClassBuilder($$props.class, classesDefault);\n  const wrapperCb = new ClassBuilder(classes, wrapperDefault);\n\n  let wClasses = i => i;\n  let tm;\n  let node;\n\n  let bg = () => {};\n\n  $: {\n    const u = utils(color || \"gray\");\n    bg = u.bg;\n  }\n\n  $: {\n    hash = hash || (value ? btoa(`${value}${new Date().valueOf()}`) : null);\n    value = value;\n  }\n\n  $: toggler = () => toggle(value, hash);\n\n  $: if (value) {\n    queue.update(u => [...u, toggler]);\n  }\n\n  $: if (!running && value && $queue.length) {\n    $queue.shift()();\n  }\n\n  $: if (!value) clearTimeout(tm);\n\n  function toggle(h, id) {\n    if (value === false && running === false) {\n      return;\n    }\n    hash = running = value = id;\n\n    if (!timeout) return;\n\n    tm = setTimeout(() => {\n      value = running = hash = false;\n      dispatch(\"finish\");\n\n      if ($queue.length) {\n        $queue.shift()();\n      }\n    }, timeout);\n  }\n\n  $: c = cb\n      .flush()\n      .add(bg(800), color)\n      .add(\"right-0 mr-2\", right)\n      .add(\"top-0 mt-2\", top)\n      .add(\"left-0 ml-2\", left)\n      .add(\"bottom-0\", bottom)\n      .add(\"snackbar\", !noAction)\n      .get();\n\n  // for some reason it doesn't get updated otherwise\n  $: if (node) node.classList = c;\n\n  wClasses = wrapperCb\n    .flush()\n    .add(`text-${text}`)\n    .get();\n</script>\n\n<style>\n  .snackbar {\n    min-width: 344px;\n  }\n</style>\n\n{#if value && (running === hash)}\n  <div\n    class=\"fixed w-full h-full top-0 left-0 z-30 pointer-events-none\"\n  >\n    <div class={wClasses}>\n      <div\n        bind:this={node}\n        in:scale={inProps}\n        out:fade={outProps}\n        on:click={() => value = false}>\n        <slot />\n        {#if !noAction}\n          <Spacer />\n          <slot name=\"action\">\n            {#if !timeout}\n              <Button text on:click={() => value = false}>Close</Button>\n            {/if}\n          </slot>\n        {/if}\n      </div>\n    </div>\n  </div>\n{/if}\n",
    "<script>\n  import utils, { ClassBuilder, filterProps } from \"../../utils/classes.js\";\n\n\n\n  export let focused = false;\n  export let error = false;\n  export let outlined = false;\n  export let labelOnTop = false;\n  export let prepend = false;\n  export let color = \"primary\";\n  // for outlined button label\n  export let bgColor = \"white\";\n  export let dense = false;\n\n  let labelDefault = `pt-4 absolute top-0 label-transition block pb-2 px-4 pointer-events-none cursor-text`;\n\n  export let add = \"\";\n  export let remove = \"\";\n  export let replace = \"\";\n\n  export let labelClasses = labelDefault;\n\n  const {\n    bg,\n    border,\n    txt,\n    caret,\n  } = utils(color);\n\n  const l = new ClassBuilder(labelClasses, labelDefault);\n\n  let lClasses = i => i;\n\n  $: lClasses = l\n      .flush()\n      .add(txt(), focused && !error)\n      .add('text-error-500', focused && error)\n      .add('label-top text-xs', labelOnTop)\n      .add('text-xs', focused)\n      .remove('pt-4 pb-2 px-4 px-1 pt-0', labelOnTop && outlined)\n      .add(`ml-3 p-1 pt-0 mt-0 bg-${bgColor} dark:bg-dark-500`, labelOnTop && outlined)\n      .remove('px-4', prepend)\n      .add('pr-4 pl-10', prepend)\n      .remove('pt-4', dense)\n      .add('pt-3', dense)\n      .add(add)\n      .remove(remove)\n      .replace(replace)\n      .get();\n\n  const props = filterProps([\n    'focused',\n    'error',\n    'outlined',\n    'labelOnTop',\n    'prepend',\n    'color',\n    'dense'\n  ], $$props);\n</script>\n\n<style>\n.label-top {\n  line-height: 0.05;\n}\n.label-transition {\n  transition: font-size 0.05s, line-height 0.1s;\n}\n:global(label.text-xs) {\n  font-size: 0.7rem;\n}\n</style>\n\n<label class=\"{lClasses} {$$props.class}\" {...props}>\n  <slot />\n</label>\n",
    "<script>\n  import utils, { ClassBuilder, filterProps } from \"../../utils/classes.js\";\n\n\n\n  export let noUnderline = false;\n  export let outlined = false;\n  export let focused = false;\n  export let error = false;\n  export let color = \"primary\";\n\n  let defaultClasses = `mx-auto w-0`;\n\n  export let add = \"\";\n  export let remove = \"\";\n  export let replace = \"\";\n\n  export let lineClasses = defaultClasses;\n\n  const {\n    bg,\n    border,\n    txt,\n    caret,\n  } = utils(color);\n\n  const l = new ClassBuilder(lineClasses, defaultClasses);\n\n  let Classes = i => i;\n\n  $: classes = l\n      .flush()\n      .add(txt(), focused && !error)\n      .add('bg-error-500', error)\n      .add('w-full', focused || error)\n      .add(bg(), focused)\n      .add(add)\n      .remove(remove)\n      .replace(replace)\n      .get();\n\n  const props = filterProps([\n    'focused',\n    'error',\n    'outlined',\n    'labelOnTop',\n    'prepend',\n    'bgcolor',\n    'color'\n  ], $$props);\n</script>\n\n<style>\n.line {\n  height: 1px;\n}\n</style>\n\n<div\n  class=\"line absolute bottom-0 left-0 w-full bg-gray-600 {$$props.class}\"\n  class:hidden={noUnderline || outlined}>\n  <div\n    class=\"{classes}\"\n    style=\"height: 2px; transition: width .2s ease\" />\n</div>\n",
    "<script>\n  import { scale, fade } from \"svelte/transition\";\n  import { ClassBuilder } from \"../../utils/classes.js\";\n\n  const classesDefault = \"tooltip whitespace-no-wrap text-xs absolute mt-2 bg-gray-600 text-gray-50 rounded md:px-2 md:py-2 py-4 px-3 z-30\";\n\n  export let classes = classesDefault;\n\n\n  export let show = false;\n\n  export let timeout = null;\n  export let delayHide = 100;\n  export let delayShow = 100;\n\n  const cb = new ClassBuilder(classes, classesDefault);\n  $: c = cb\n    .flush()\n    .add(classes, true, classesDefault)\n    .add($$props.class)\n    .get();\n\n  function showTooltip() {\n    if (show) return;\n\n    show = true;\n\n    if (!timeout) return;\n\n    timeout = setTimeout(() => {\n      show = false;\n    }, timeout);\n  }\n\n  function hideTooltip() {\n    if (!show) return;\n\n    show = false;\n    clearTimeout(timeout);\n  }\n\n  function debounce(func, wait, immediate) {\n    let timeout;\n    return function() {\n      let context = this,\n        args = arguments;\n      let later = function() {\n        timeout = null;\n        if (!immediate) func.apply(context, args);\n      };\n      let callNow = immediate && !timeout;\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n      if (callNow) func.apply(context, args);\n    };\n  }\n</script>\n\n<style>\n.tooltip {\n  left: 50%;\n  transform: translateX(-50%);\n}\n</style>\n\n<div class=\"relative inline-block\">\n  <div\n    on:mouseenter={debounce(showTooltip, delayShow)}\n    on:mouseleave={debounce(hideTooltip, delayHide)}\n    on:mouseenter\n    on:mouseleave\n    on:mouseover\n    on:mouseout\n  >\n    <slot name=\"activator\" />\n  </div>\n\n  {#if show}\n    <div\n      in:scale={{ duration: 150 }}\n      out:scale={{ duration: 150, delay: 100 }}\n      class={c}\n    >\n      <slot />\n    </div>\n  {/if}\n</div>\n",
    "<script>\n  import { createEventDispatcher, onDestroy } from 'svelte';\n\n  const dispatch = createEventDispatcher();\n\n  export let offset = 0;\n  export let throttle = 250;\n  export let c = '';\n  export let style = '';\n  export let once = true;\n  export let threshold = 1.0;\n  export let disabled = false;\n\n  let className = \"\";\n  export { className as class };\n\n  let visible = disabled;\n  let wasVisible = false;\n  let intersecting = false;\n  let removeHandlers = () => {};\n\n  function throttleFn(fn, time) {\n    let last, deferTimer;\n\n    return () => {\n      const now = +new Date;\n\n      if (last && now < last + time) {\n        // hold on to it\n        clearTimeout(deferTimer);\n        deferTimer = setTimeout(function () {\n          last = now;\n          fn();\n        }, time);\n      } else {\n        last = now;\n        fn();\n      }\n    };\n  }\n\n  function callEvents(wasVisible, observer, node) {\n    if (visible && !wasVisible) {\n      dispatch('enter');\n      return;\n    }\n\n    if (wasVisible && !intersecting) {\n      dispatch('leave');\n    }\n\n    if (once && wasVisible && !intersecting) {\n      removeHandlers();\n    }\n  }\n\n  function waypoint(node) {\n    if (!window || disabled) return;\n\n    if (window.IntersectionObserver && window.IntersectionObserverEntry) {\n      const observer = new IntersectionObserver(([ { isIntersecting } ]) => {\n        wasVisible = visible;\n\n        intersecting = isIntersecting;\n\n        if (wasVisible && once && !isIntersecting) {\n          callEvents(wasVisible, observer, node);\n          return;\n        }\n\n        visible = isIntersecting;\n\n        callEvents(wasVisible, observer, node);\n      }, {\n        rootMargin: offset + 'px',\n        threshold,\n      });\n\n      observer.observe(node);\n\n      removeHandlers = () => observer.unobserve(node);\n\n      return removeHandlers;\n    }\n\n    function checkIsVisible() {\n      // Kudos https://github.com/twobin/react-lazyload/blob/master/src/index.jsx#L93\n      if (!(node.offsetWidth || node.offsetHeight || node.getClientRects().length)) return;\n\n      let top;\n      let height;\n\n      try {\n        ({ top, height } = node.getBoundingClientRect());\n      } catch (e) {\n        ({ top, height } = defaultBoundingClientRect);\n      }\n\n      const windowInnerHeight = window.innerHeight\n        || document.documentElement.clientHeight;\n\n      wasVisible = visible;\n      intersecting = (top - offset <= windowInnerHeight) &&\n        (top + height + offset >= 0);\n\n      if (wasVisible && once && !isIntersecting) {\n        callEvents(wasVisible, observer, node);\n        return;\n      }\n\n      visible = intersecting;\n\n      callEvents(wasVisible);\n    }\n\n    checkIsVisible();\n\n    const throttled = throttleFn(checkIsVisible, throttle);\n\n    window.addEventListener('scroll', throttled);\n    window.addEventListener('resize', throttled);\n\n    removeHandlers = () => {\n      window.removeEventListener('scroll', throttled);\n      window.removeEventListener('resize', throttled);\n    }\n\n    return removeHandlers;\n  }\n</script>\n\n<style>\n.wrapper {\n  display: inline-block;\n}\n</style>\n\n<div class=\"wrapper {className} {c}\" {style} use:waypoint>\n  {#if visible}\n    <slot />\n  {/if}\n</div>\n",
    "<script>\nimport { Snackbar } from 'smelte';\nimport { incrToCoords } from './math.js';\nimport Header from \"./components/Header.svelte\";\nimport Settings from \"./components/Settings.svelte\";\nimport Kernel from \"./components/Kernel.svelte\";\nimport Input from \"./components/Input.svelte\";\nimport Output from \"./components/Output.svelte\";\nimport {\n\tdefaultSettings,\n\tcopySettings\n} from \"./settings.js\";\n\nlet settings = \tcopySettings(defaultSettings);\n\n$: dims = settings.dims[settings.dimty];\n\n$: convoluted = dims.input.data.conv(\n\tdims.input.padding,\n\tdims.kernel.data,\n\tdims.kernel.dilation,\n\tdims.kernel.stride,\n\tdims.kernel.type\n);\n\nlet inActives;\nlet outActives;\n\n$: activateOutput = (coord) => {\n\toutActives = coord.map(co => [co]);\n\tinActives = convoluted.inCoordsToBlockIndexes(\n\t\tconvoluted.outCoordsToIn(coord), false\n\t);\n};\n\n$: activateInput = (coord) => {\n\tconst outCoord = convoluted.inCoordsToOut(coord);\n\toutActives = outCoord.map(co => [co]);\n\tactivateOutput(outCoord);\n};\n\nconst activateInputBox = (event) => {\n\tactivateInput(event.detail.coord);\n\tif (settings.autoWalker) {\n\t\t// this triggers autoWalker to be changed.\n\t\t// even when it is already false\n\t\tsettings.autoWalker = false;\n\t}\n};\n\nconst activateOutputBox = (event) => {\n\tactivateOutput(event.detail.coord);\n\tif (settings.autoWalker) {\n\t\tsettings.autoWalker = false;\n\t}\n}\n\nconst deactivate = () => {\n\tinActives = undefined;\n\toutActives = undefined;\n};\n\n// autoWalker\nlet interval;\n\n// $ runs twice\n// see: https://github.com/sveltejs/svelte/issues/4265\nlet autoWalkerChangeCount = 1;\n$: {\n\t//++autoWalkerChangeCount;\n\tif (autoWalkerChangeCount % 2 === 1) {\n\t\tif (settings.autoWalker && !!!interval) {\n\t\t\tlet walkIndex = -1;\n\t\t\tinterval = setInterval(() => {\n\t\t\t\tconst coord = incrToCoords(walkIndex, convoluted.output.size);\n\t\t\t\tactivateOutput(coord);\n\t\t\t\twalkIndex ++;\n\t\t\t}, 600);\n\t\t} else if (!settings.autoWalker && interval > 0) {\n\t\t\tclearInterval(interval);\n\t\t\tinterval = undefined;\n\t\t\tdeactivate();\n\t\t}\n\t}\n}\n\n// 3d view controls\nlet sceneKernel;\nlet sceneKernelInput;\nlet sceneKernelOutput;\nlet sceneInput;\nlet sceneOutput;\nlet controlStart = false;\nlet winHeight;\nlet winWidth;\n\n$: rotateScene = (newX, newY) => {\n    sceneKernel.style.transform =\n        'rotateY('+ newY +'deg) rotateX('+ newX +'deg)';\n    sceneInput.style.transform =\n        'rotateY('+ newY +'deg) rotateX('+ newX +'deg)';\n    sceneOutput.style.transform =\n        'rotateY('+ newY +'deg) rotateX('+ newX +'deg)';\n\n\tif (sceneKernelInput)\n\t\tsceneKernelInput.style.transform =\n\t\t\t'rotateY('+ newY +'deg) rotateX('+ newX +'deg)';\n\tif (sceneKernelOutput)\n\t\tsceneKernelOutput.style.transform =\n\t\t\t'rotateY('+ newY +'deg) rotateX('+ newX +'deg)';\n};\n\n// if winHeight/winWidth changes\n$: sceneControl = (event) => {\n\tif (!controlStart) return;\n\n\tconst cursorX = event.pageX,\n\t\tcursorY = event.pageY,\n\t\tnewRotationX = 180 - 360*cursorY / winHeight,\n\t\tnewRotationY = -(180 - 360*cursorX / winWidth);\n\n\trotateScene(newRotationX, newRotationY);\n};\n\n$: resetControl = () => {\n\trotateScene(-20, 45);\n};\n\n</script>\n\n<svelte:window\n\ton:mouseup={() => controlStart = false}\n    on:mousemove={sceneControl}\n\tbind:innerWidth={winWidth}\n\tbind:innerHeight={winHeight}\n\t/>\n\n<main class=\"bg-gray-200\">\n\t<div class=\"grid-container\">\n\t\t<div class=\"header-cell mb-3 bg-primary-900\">\n\t\t\t<Header />\n\t\t</div>\n\t\t<div class=\"settings-cell bg-white border rounded-l-md border-gray-300 ml-3 mb-3 mr-1\">\n\t\t\t<Settings\n\t\t\t\tbind:settings={settings}\n\t\t\t\tbind:controlStart={controlStart}\n\t\t\t\ton:viewReset={resetControl} />\n\t\t</div>\n\t\t<div class=\"kernel-cell bg-white border rounded-tr-md border-gray-300 mr-3\">\n\t\t\t<Kernel\n\t\t\t\tkernel={dims.kernel}\n\t\t\t\tvisual={settings.visual}\n\t\t\t\tshowData={settings.showData}\n\t\t\t\tinputData={inActives && dims.input.data.pad(dims.input.padding).subset(inActives)}\n\t\t\t\toutputData={outActives && convoluted.output.subset(outActives).first()}\n\t\t\t\tbind:scene={sceneKernel}\n\t\t\t\tbind:scene2={sceneKernelInput}\n\t\t\t\tbind:scene3={sceneKernelOutput}\n\t\t\t\ton:mount={resetControl}\n\t\t\t\ton:mousedown={() => controlStart = true} />\n\t\t</div>\n\t\t<div class=\"input-cell bg-white border border-gray-300 mb-3\">\n\t\t\t<Input\n\t\t\t\tinput={dims.input}\n\t\t\t\tvisual={settings.visual}\n\t\t\t\tshowData={settings.showData}\n\t\t\t\tactives={inActives}\n\t\t\t\ton:activate={activateInputBox}\n\t\t\t\ton:deactivate={deactivate}\n\t\t\t\tbind:scene={sceneInput}\n\t\t\t\ton:mount={resetControl}\n\t\t\t\ton:mousedown={() => controlStart = true} />\n\t\t</div>\n\t\t<div class=\"output-cell bg-white border rounded-br-md border-gray-300 mr-3 mb-3\">\n\t\t\t<Output\n\t\t\t\toutput={{data: convoluted.output, size: convoluted.output.size}}\n\t\t\t\tvisual={settings.visual}\n\t\t\t\tshowData={settings.showData}\n\t\t\t\tactives={outActives}\n\t\t\t\ton:activate={activateOutputBox}\n\t\t\t\ton:deactivate={deactivate}\n\t\t\t\tbind:scene={sceneOutput}\n\t\t\t\ton:mount={resetControl}\n\t\t\t\ton:mousedown={() => controlStart = true} />\n\t\t</div>\n\t</div>\n</main>\n<Snackbar\n  noAction\n  color=\"alert\"\n  hash=\"autoWalker\"\n  timeout={2000}\n  class=\"pointer-events-auto flex absolute py-2 text-sm\n         px-4 z-30 mb-4 content-between mx-auto\n         rounded items-center elevation-2\"\n  left\n  value={!settings.autoWalker}>\n  <div>autoWalker stopped!</div>\n</Snackbar>\n\n<style>\n.grid-container {\n\tdisplay: grid;\n\theight: 100vh;\n\tgrid-gap: 2px;\n\tgrid-template-columns: 360px 1fr 1fr;\n\tgrid-template-rows: max-content max-content auto;\n\tgrid-template-areas:\n\t\t\"header-cell header-cell header-cell\"\n\t\t\"settings-cell kernel-cell kernel-cell\"\n\t\t\"settings-cell input-cell output-cell\";\n}\n\n\n.grid-container > .header-cell {\n\tgrid-area: header-cell;\n}\n\n.grid-container > .settings-cell {\n\tgrid-area: settings-cell;\n}\n\n.grid-container > .kernel-cell {\n\tgrid-area: kernel-cell;\n}\n\n.grid-container > .input-cell {\n\tgrid-area: input-cell;\n}\n\n.grid-container > .output-cell {\n\tgrid-area: output-cell;\n}\n</style>",
    "<div class=\"header flex flex-row\">\n    <div class=\"logo text-white p-3 pl-5\">\n        <h5>CNN Convoluter</h5>\n    </div>\n    <div class=\"social text-right pr-5 flex-grow\">\n        <a href=\"https://github.com/pwwang/cnn-convoluter\" target=\"_blank\"\n           class=\"inline-block\">\n            <img src=\"github.png\" alt=\"Github\" width=\"32\" height=\"32\" />\n        </a>\n    </div>\n</div>\n\n<style>\n.header {\n    align-items: center;\n}\n</style>\n",
    "<script>\nimport Image from 'smelte/src/components/Image';\nimport Container from './Container.svelte';\nimport MatrixDrawer from './drawings/MatrixDrawer.svelte';\n\nexport let kernel;\nexport let visual;\nexport let showData;\nexport let scene;\nexport let scene2;\nexport let scene3;\nexport let inputData;\nexport let outputData;\n\n</script>\n\n<Container>\n    <div slot=\"title\">\n        Kernel [{kernel.size}]\n    </div>\n    <div slot=\"content\" class=\"text-center\">\n        <div class=\"inline-flex align-items-center\">\n        {#if visual}\n            <MatrixDrawer\n                showData={showData}\n                type=\"kernel\"\n                data={kernel}\n                inputData={inputData}\n                outputData={outputData}\n                bind:scene={scene}\n                bind:scene2={scene2}\n                bind:scene3={scene3}\n                on:mount\n                on:mousedown />\n        {:else}\n                <Image\n                    src=\"https://via.placeholder.com/400x100.png?text=Visualization+disabled.\"\n                    alt=\"Visualization disabled.\" />\n        {/if}\n        </div>\n    </div>\n</Container>\n\n<style>\n.align-items-center {\n    align-items: center;\n}\n</style>\n",
    "<script>\nimport { createEventDispatcher } from \"svelte\";\n\nimport {Tooltip, Button, Slider, Icon, Dialog, Snackbar} from \"smelte\";\nimport Container from './Container.svelte';\nimport SettingsDimension from './settings/SettingsDimension.svelte';\nimport Switch from './settings/Switch.svelte';\nimport { prod, Matrix } from '../math.js';\nimport { defaultSettings, copySettings } from '../settings.js';\n\nexport let settings;\nexport let controlStart;\n\nlet kernelType = 1;\n\n$: settings.dims[settings.dimty].kernel.type = kernelType === 1 ? 'conv' : (\n    kernelType === 2 ? 'maxpool' : 'avgpool'\n)\n$: if (!settings.visual) {\n    settings.showData = false;\n}\n\nlet showDataDialog = false;\nlet dataInput;\nlet dataType;\nlet dataError = false;\nlet dataErrorMsg;\n\nconst dispatcher = createEventDispatcher();\nconst resetView = () => {\n    dispatcher('viewReset');\n};\n\n$: randomDataUpdate = () => {\n    if (dataType === 'kernel') {\n        settings.dims[settings.dimty].kernel.data = Matrix.random(\n            settings.dims[settings.dimty].kernel.data.size, -1, 1\n        );\n    } else {\n        settings.dims[settings.dimty].input.data = Matrix.random(\n            settings.dims[settings.dimty].input.data.size\n        );\n    }\n};\n\n$: randomDataToTextarea = (textarea) => {\n    textarea.value = dataType === 'kernel' ?\n        Matrix.random(settings.dims[settings.dimty].kernel.data.size, -1, 1).stringify() :\n        Matrix.random(settings.dims[settings.dimty].input.data.size).stringify();\n};\n\n$: saveData = (textarea) => {\n    if (dataError) {dataError = false;}\n    try {\n        const data = Matrix.fromString(textarea.value);\n        const total = prod(\n            dataType === 'kernel' ?\n                settings.dims[settings.dimty].kernel.data.size :\n                settings.dims[settings.dimty].input.data.size\n        );\n        if (total !== prod(data.size)) {\n            throw `Dimension mismatch. Expected total ${total} elements,\n                but got ${prod(data.size)}`;\n        }\n\n        if (dataType === 'kernel') {\n            data.reshape(settings.dims[settings.dimty].kernel.data.size);\n            settings.dims[settings.dimty].kernel.data = data;\n        } else {\n            data.reshape(settings.dims[settings.dimty].input.data.size);\n            settings.dims[settings.dimty].input.data = data;\n        }\n        showDataDialog = false;\n    } catch(e) {\n        dataError = true;\n        dataErrorMsg = e;\n    }\n};\n\n$: settings.dims[settings.dimty].input.data.resize(\n    settings.dims[settings.dimty].input.size,\n    {fill: 'random', min: 0, max: 9}\n);\n\n$: settings.dims[settings.dimty].kernel.data.resize(\n    settings.dims[settings.dimty].kernel.size,\n    {fill: 'random', min: -1, max: 1}\n);\n\n</script>\n\n<Container>\n    <div slot=\"title\" class=\"flex flex-row\" style=\"align-items: center;\">\n        <div>Settings</div>\n        <div class=\"leading-none flex-grow text-right\">\n            <Tooltip>\n                <div slot=\"activator\">\n                    <Icon\n                        on:click={() => settings = copySettings(defaultSettings)}\n                        class=\"cursor-pointer\">\n                        settings_backup_restore\n                    </Icon>\n                </div>\n                Reset settings\n            </Tooltip>\n        </div>\n    </div>\n    <div slot=\"content\">\n\n        <div class=\"subtitle-1 font-medium mb-1\">Visualization</div>\n        <Tooltip>\n            <div slot=\"activator\">\n                <Switch\n                    bind:value={settings.visual}\n                    class=\"w-32\"\n                    label={settings.visual ? 'Disable' : 'Enable'}\n                />\n            </div>\n            You can disable visualization, with just dimension calculation. <br />\n            This is useful when you have large dimensions that your browser can't visualize them.\n        </Tooltip>\n\n        {#if settings.visual}\n        <Switch\n            bind:value={settings.showData}\n            on:change={() => setTimeout(resetView, 100)}\n            label={settings.showData ? 'Hide Data' : 'Show Data'}\n        />\n        {/if}\n\n        {#if settings.dimty === 3}\n        <Switch\n            bind:value={controlStart}\n            class=\"w-32\"\n            label={controlStart ? 'Stop Control' : 'Start Control'}\n        />\n        <Button\n            small\n            flat\n            color=\"blue\"\n            on:click={resetView}>\n            Reset View\n        </Button>\n        {/if}\n\n        <div class=\"subtitle-1 font-medium mb-1 mt-3\">\n            Dimensionality: {settings.dimty}\n        </div>\n        <div on:mousedown|stopPropagation={() => {settings.autoWalker = false}}>\n            <Slider\n                min={1}\n                max={3}\n                bind:value={settings.dimty} />\n        </div>\n\n        <div class=\"subtitle-1 font-medium mb-1 mt-3\">\n            Input\n        </div>\n        <div class=\"body-2\">Dimension</div>\n        <SettingsDimension min={1} bind:value={settings.dims[settings.dimty].input.size} />\n        <div class=\"body-2\">Padding</div>\n        <SettingsDimension\n            bind:value={settings.dims[settings.dimty].input.padding} />\n        {#if settings.showData}\n        <div class=\"body-2\">Data</div>\n        <Button\n            small\n            flat\n            on:click = { () => {dataType = 'input'; randomDataUpdate();} }>\n            Random\n        </Button>\n        <Button\n            small\n            flat\n            on:click = {() => {dataType = 'input'; showDataDialog = true;}}>\n            Paste\n        </Button>\n        <Dialog bind:value={showDataDialog} class=\"w-1/2 h-auto\" persistent>\n            <h5 slot=\"title\">Paste your {dataType} data:</h5>\n            <div class=\"text-gray-700\">Whitespace (tab/space) delimited. </div>\n            <div class=\"text-gray-700\">For 3D data, use <code class=\"border\">---</code> to separate at dim 0.</div>\n            <div class=\"text-gray-700 mb-1\">Only integers from 0 to 10 allowed.</div>\n            <textarea class=\"border w-full h-64\" bind:this={dataInput}></textarea>\n            <div slot=\"actions\">\n                <Button text\n                    on:click={() => randomDataToTextarea(dataInput)}>\n                    Random\n                </Button>\n                <Button text\n                    on:click={() => saveData(dataInput)}>\n                    Apply\n                </Button>\n                <Button text color=\"alert\"\n                    on:click={() => {showDataDialog = false; dataInput.value = ''}}>Cancel\n                </Button>\n            </div>\n        </Dialog>\n        {/if}\n\n        <div class=\"subtitle-1 font-medium mb-1 mt-3\">\n            Kernel\n        </div>\n\n        {#if settings.showData}\n        <div class=\"body-2\">\n            Type: {settings.dims[settings.dimty].kernel.type}\n        </div>\n        <Slider\n            min={1}\n            max={3}\n            bind:value={kernelType} />\n        {/if}\n\n        <div class=\"body-2\">\n            Size\n        </div>\n        <SettingsDimension\n            bind:value={settings.dims[settings.dimty].kernel.size}\n            min={1}\n            errorMsg=\"Kernel size must be a natural number.\" />\n\n        <div class=\"body-2\">Stride</div>\n        <SettingsDimension\n            bind:value={settings.dims[settings.dimty].kernel.stride}\n            min={1}\n            errorMsg=\"Stride must be a natural number.\" />\n\n\n        <div class=\"body-2\">Dilation</div>\n        <SettingsDimension\n            bind:value={settings.dims[settings.dimty].kernel.dilation}\n            min={1}\n            errorMsg=\"Dilation must be a natural number.\" />\n\n        {#if settings.showData && kernelType === 1}\n        <div class=\"body-2\">Data</div>\n        <Button\n            small\n            flat\n            on:click = { () => {dataType = 'kernel'; randomDataUpdate();} }>\n            Random\n        </Button>\n        <Button\n            small\n            flat\n            on:click = {() => {dataType = 'kernel'; showDataDialog = true;}}>\n            Paste\n        </Button>\n        {/if}\n\n        <div class=\"subtitle-1 font-medium mb-1 mt-3\">AutoWalker</div>\n        <Tooltip>\n            <div slot=\"activator\">\n                <Button\n                    small\n                    flat\n                    light={!settings.autoWalker}\n                    disabled={!settings.visual}\n                    on:click = {() => settings.autoWalker = !settings.autoWalker}\n                    value={settings.autoWalker}>\n                    {settings.autoWalker ? 'Stop' : 'Start'}\n                </Button>\n            </div>\n            autoWalker will be automatically stopped while you hover on the input or output.\n        </Tooltip>\n\n    </div>\n</Container>\n\n<Snackbar\n  noAction\n  color=\"alert\"\n  hash=\"dataerror\"\n  timeout={2000}\n  class=\"pointer-events-auto flex absolute py-2 text-sm\n         px-4 z-30 mb-4 content-between mx-auto\n         rounded items-center elevation-2\"\n  left\n  value={dataError}>\n  <div>{dataErrorMsg}</div>\n</Snackbar>\n\n<style>\n:global(.tooltip) {\n    left: 110% !important;\n    top: -10px !important;\n    transform: none !important;\n}\n</style>\n",
    "<script>\nimport { createEventDispatcher } from 'svelte';\n\nexport let ix;\nexport let iy;\nexport let iz;\nexport let type;\nexport let size;\nexport let data;\nexport let isPadding;\nexport let isActive;\nexport let posStyle;\n\n$: typeClasses = (ix+iy+iz===0) ? 'bg-alert-900' : (isPadding ? 'bg-gray-600' : (\n    type === 'kernel' ? 'bg-primary-900' : (\n        type === 'input' ? 'bg-secondary-900' : 'bg-blue-900'\n    )\n));\n\n$: activeClasses = isActive ? 'bg-opacity-100' : 'bg-opacity-25';\n\nconst dispatcher = createEventDispatcher();\n\nconst activate = () => {\n    dispatcher('activate', {\n        coord: [ix, iy, iz]\n    });\n};\n\nconst deactivate = () => {\n    dispatcher('deactivate');\n}\n</script>\n\n<div\n    class=\"cube inline-box absolute {typeClasses} {activeClasses}\"\n    style=\"--size: {size}; {posStyle};\"\n    on:mouseenter={activate}\n    on:mouseleave={deactivate}>\n    <div class=\"side inline-box border border-white border-opacity-25 absolute side-abcd\"></div>\n    <div class=\"side inline-box border border-white border-opacity-25 absolute side-efgh\"></div>\n    <div class=\"side inline-box border border-white border-opacity-25 absolute side-abef\"></div>\n    <div class=\"side inline-box border border-white border-opacity-25 absolute side-cdgh\"></div>\n    <div class=\"side inline-box border border-white border-opacity-25 absolute side-aceg\">{data === undefined || isPadding ? '' : data}</div>\n    <div class=\"side inline-box border border-white border-opacity-25 absolute side-bdfh\"></div>\n</div>\n\n<style>\n.cube {\n    transform-style: preserve-3d;\n    transform-origin: center center;\n    width: calc(var(--size) * 1px);\n    height: calc(var(--size) * 1px);\n}\n.side {\n    background: inherit;\n    box-sizing: border-box;\n    width: calc(var(--size) * 1px);\n    height: calc(var(--size) * 1px);\n}\n\n/* e-------f\n  /|      /|\n / |     / |\na--|----b  |\n|  g----|--h\n| /     | /\nc-------d\n*/\n.side-abcd {\n    top: 0;\n    left: 0;\n}\n.side-efgh {\n    top: 0;\n    left: 0;\n    transform: translateZ(calc(var(--size) * 1px));\n}\n.side-abef {\n    top: 0;\n    left: 0;\n    transform-origin: top left;\n    transform: rotateX(90deg);\n}\n.side-cdgh {\n    bottom: 0;\n    left: 0;\n    transform-origin: bottom left;\n    transform: rotateX(-90deg);\n}\n.side-aceg {\n    top: 0;\n    left: 0;\n    transform-origin: top left;\n    transform: rotateY(-90deg);\n}\n.side-bdfh {\n    top: 0;\n    right: 0;\n    transform-origin: top right;\n    transform: rotateY(90deg);\n}\n</style>\n",
    "<script>\nimport { Icon } from 'smelte';\nimport Box2d from \"./Box2d.svelte\";\n\n// The type: kernel/input/output\nexport let type;\n// The active boxes\nexport let actives;\n\nexport let showData;\n\nexport let data; // input/kernel\nexport let inputData;\n// the convoluted data\nexport let outputData;\n\n$: dataPadded = data.padding ? data.data.pad(data.padding, 'zero') : data.data;\n$: dataPaddedSize = data.size.length === 1 ? [1, dataPadded.size[0]] : dataPadded.size;\n\n$: maxsize = Math.max.apply(null, dataPaddedSize);\n$: boxsize = showData ? 'with-data' : (\n    maxsize < 40 ? 'large' : (maxsize < 100 ? 'medium' : 'small')\n);\n\n$: isPadding = (irow, icol) => {\n    if (!data.padding)\n        return false;\n    if (data.size.length === 2) {\n        return irow < data.padding[0] ||\n            irow >= dataPaddedSize[0] - data.padding[0] ||\n            icol < data.padding[1] ||\n            icol >= dataPaddedSize[1] - data.padding[1];\n    } else {\n        return icol < data.padding[0] ||\n            icol >= dataPaddedSize[1] - data.padding[0];\n    }\n};\n\n$: isActive = (irow, icol) => {\n    if (!actives)\n        return false;\n    if (data.size.length === 2) {\n        return actives[0].includes(irow) && actives[1].includes(icol);\n    } else {\n        return actives[0].includes(icol);\n    }\n}\n\n</script>\n\n<div\n    class=\"matrix-wrapper mx-auto\"\n    style=\"--matrix-nrows: {dataPaddedSize[0]}; --matrix-ncols: {dataPaddedSize[1]}\">\n    {#each Array(dataPaddedSize[0]) as _, irow}\n        {#each Array(dataPaddedSize[1]) as _, icol}\n            <Box2d\n                isPadding={isPadding(irow, icol)}\n                isActive={isActive(irow, icol)}\n                irow={data.size.length === 1 ? undefined : irow}\n                icol={icol}\n                type={type}\n                data={showData ? (!data.type || data.type === 'conv' ? (\n                        data.size.length === 1 ?\n                        dataPadded.data[icol] :\n                        dataPadded.data[irow][icol]\n                    ) : data.type[0]) : ''}\n                on:activate\n                on:deactivate\n                size={boxsize} />\n        {/each}\n    {/each}\n</div>\n\n{#if showData && type === 'kernel'}\n<Icon class=\"cursor-pointer px-2\">clear</Icon>\n\n<div\n    class=\"matrix-wrapper mx-auto\"\n    style=\"--matrix-nrows: {dataPaddedSize[0]}; --matrix-ncols: {dataPaddedSize[1]}\">\n    {#each Array(dataPaddedSize[0]) as _, irow}\n        {#each Array(dataPaddedSize[1]) as _, icol}\n            <Box2d\n                isPadding={isPadding(irow, icol)}\n                isActive={isActive(irow, icol)}\n                irow={data.size.length === 1 ? undefined : irow}\n                icol={icol}\n                type='input'\n                data={inputData && (inputData.size.length === 1 ?\n                    inputData.data[icol] :\n                    inputData.data[irow][icol])}\n                size={boxsize} />\n        {/each}\n    {/each}\n</div>\n\n<Icon class=\"cursor-pointer px-2\">drag_handle</Icon>\n\n<div class=\"matrix-wrapper\">\n    <Box2d\n        isPadding={false}\n        isActive={false}\n        irow={0}\n        icol={0}\n        type='output'\n        data={outputData}\n        size={boxsize} />\n</div>\n{/if}\n\n<style>\n.matrix-wrapper {\n    display: inline-grid;\n    grid-gap: 1px;\n    grid-template-rows: repeat(var(--matrix-nrows), min-content);\n    grid-template-columns: repeat(var(--matrix-ncols), min-content);\n}\n</style>\n",
    "<script>\nimport { Icon } from 'smelte';\nimport { onMount, createEventDispatcher } from 'svelte';\nimport Box3d from \"./Box3d.svelte\";\n\n// The type: kernel/input/output\nexport let type;\n// The active boxes\nexport let actives;\n// show data?\nexport let showData;\n\nexport let data;\nexport let inputData;\nexport let outputData;\n\nexport let scene;\nexport let scene2;\nexport let scene3;\n\n$: padding = padding === undefined ? [0, 0, 0] : padding;\n$: actives = (actives === undefined || actives.length < 3) ? [[], [], []] : actives;\n$: dataPadded = data.padding ? data.data.pad(data.padding, 'zero') : data.data;\n\n$: maxsize = Math.max.apply(null, dataPadded.size);\n$: boxsize = maxsize < 20 ? 30 : (maxsize < 50 ? 20 : 12);\n\n$: isPadding = (ix, iy, iz) => {\n    if (!data.padding)\n        return false;\n    return ix < data.padding[0] ||\n        ix >= dataPadded.size[0] - data.padding[0] ||\n        iy < data.padding[1] ||\n        iy >= dataPadded.size[1] - data.padding[1] ||\n        iz < data.padding[2] ||\n        iz >= dataPadded.size[2] - data.padding[2];\n};\n\n$: isActive = (ix, iy, iz) => {\n    return actives[0].includes(ix) &&\n        actives[1].includes(iy) &&\n        actives[2].includes(iz);\n}\n\nconst getPosStyle = (ix, iy, iz, nx, ny, nz, boxsize) => {\n    const x = ix - Math.floor(nx / 2);\n    const y = iy - Math.floor(ny / 2);\n    const z = iz - Math.floor(nz / 2);\n    return `left: ${x * boxsize}px;\n        top: ${y * boxsize}px;\n        transform: translateZ(${z * boxsize}px);`;\n};\n\nconst dispatcher = createEventDispatcher();\nonMount(() => dispatcher('mount'));\n</script>\n\n<div\n    class=\"matrix-wrapper\"\n    style=\"--scene-size: {boxsize * maxsize + 100};\">\n    <div class=\"relative\">\n        <div\n            on:mousedown\n            bind:this={scene}\n            class=\"scene absolute h-0 w-0\">\n        {#each Array(dataPadded.size[0]) as _, ix}\n            {#each Array(dataPadded.size[1]) as _, iy}\n                {#each Array(dataPadded.size[2]) as _, iz}\n                    <Box3d\n                        isPadding={isPadding(ix, iy, iz)}\n                        isActive={isActive(ix, iy, iz)}\n                        ix={ix}\n                        iy={iy}\n                        iz={iz}\n                        type={type}\n                        data={showData ? (\n                            !data.type || data.type === 'conv' ?\n                                dataPadded.data[ix][iy][iz] :\n                                data.type[0]\n                        ) : ''}\n                        posStyle={getPosStyle(\n                            ix, iy, iz,\n                            dataPadded.size[0], dataPadded.size[1], dataPadded.size[2],\n                            boxsize\n                        )}\n                        on:activate\n                        on:deactivate\n                        size={boxsize} />\n                {/each}\n            {/each}\n        {/each}\n        </div>\n    </div>\n</div>\n\n{#if showData && type === 'kernel'}\n<Icon class=\"cursor-pointer\">clear</Icon>\n\n<div\n    class=\"matrix-wrapper\"\n    style=\"--scene-size: {boxsize * maxsize + 100};\">\n    <div class=\"relative\">\n        <div\n            on:mousedown\n            bind:this={scene2}\n            class=\"scene absolute h-0 w-0\">\n        {#each Array(dataPadded.size[0]) as _, ix}\n            {#each Array(dataPadded.size[1]) as _, iy}\n                {#each Array(dataPadded.size[2]) as _, iz}\n                    <Box3d\n                        type=\"input\"\n                        data={inputData && inputData.data[ix][iy][iz]}\n                        posStyle={getPosStyle(\n                            ix, iy, iz,\n                            dataPadded.size[0], dataPadded.size[1], dataPadded.size[2],\n                            boxsize\n                        )}\n                        size={boxsize} />\n                {/each}\n            {/each}\n        {/each}\n        </div>\n    </div>\n</div>\n\n<Icon class=\"cursor-pointer\">drag_handle</Icon>\n\n<div class=\"matrix-wrapper\"\n    style=\"--scene-size: {boxsize * 1 + 100};\">\n    <div class=\"relative\">\n        <div\n            on:mousedown\n            bind:this={scene3}\n            class=\"scene absolute h-0 w-0\">\n            <Box3d\n                type='output'\n                ix={0}\n                iy={0}\n                iz={0}\n                posStyle={getPosStyle(\n                    0,0,0,1,1,1,\n                    boxsize\n                )}\n                data={outputData}\n                size={boxsize} />\n        </div>\n    </div>\n</div>\n{/if}\n\n<style>\n.matrix-wrapper, .relative {\n    min-width: calc(var(--scene-size) * 1px);\n    min-height: calc(var(--scene-size) * 1px);\n}\n.scene {\n    top: 50%;\n    left: 50%;\n    transform-style: preserve-3d;\n    transform-origin: center center;\n}\n</style>\n"
  ],
  "names": [],
  "mappings": "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"
}